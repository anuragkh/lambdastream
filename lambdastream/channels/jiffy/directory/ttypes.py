#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:no_utf8strings,slots
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec


from thrift.transport import TTransport
all_structs = []


class rpc_perm_options(object):
    rpc_replace = 0
    rpc_add = 1
    rpc_remove = 2

    _VALUES_TO_NAMES = {
        0: "rpc_replace",
        1: "rpc_add",
        2: "rpc_remove",
    }

    _NAMES_TO_VALUES = {
        "rpc_replace": 0,
        "rpc_add": 1,
        "rpc_remove": 2,
    }


class rpc_file_type(object):
    rpc_none = 0
    rpc_regular = 1
    rpc_directory = 2

    _VALUES_TO_NAMES = {
        0: "rpc_none",
        1: "rpc_regular",
        2: "rpc_directory",
    }

    _NAMES_TO_VALUES = {
        "rpc_none": 0,
        "rpc_regular": 1,
        "rpc_directory": 2,
    }


class rpc_storage_mode(object):
    rpc_in_memory = 0
    rpc_in_memory_grace = 1
    rpc_on_disk = 2

    _VALUES_TO_NAMES = {
        0: "rpc_in_memory",
        1: "rpc_in_memory_grace",
        2: "rpc_on_disk",
    }

    _NAMES_TO_VALUES = {
        "rpc_in_memory": 0,
        "rpc_in_memory_grace": 1,
        "rpc_on_disk": 2,
    }


class rpc_replica_chain(object):
    """
    Attributes:
     - block_ids
     - name
     - metadata
     - storage_mode

    """

    __slots__ = (
        'block_ids',
        'name',
        'metadata',
        'storage_mode',
    )


    def __init__(self, block_ids=None, name=None, metadata=None, storage_mode=None,):
        self.block_ids = block_ids
        self.name = name
        self.metadata = metadata
        self.storage_mode = storage_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.block_ids = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString()
                        self.block_ids.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.metadata = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.storage_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rpc_replica_chain')
        if self.block_ids is not None:
            oprot.writeFieldBegin('block_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.block_ids))
            for iter6 in self.block_ids:
                oprot.writeString(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 3)
            oprot.writeString(self.metadata)
            oprot.writeFieldEnd()
        if self.storage_mode is not None:
            oprot.writeFieldBegin('storage_mode', TType.I32, 4)
            oprot.writeI32(self.storage_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.block_ids is None:
            raise TProtocolException(message='Required field block_ids is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.metadata is None:
            raise TProtocolException(message='Required field metadata is unset!')
        if self.storage_mode is None:
            raise TProtocolException(message='Required field storage_mode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class rpc_file_status(object):
    """
    Attributes:
     - type
     - permissions
     - last_write_time

    """

    __slots__ = (
        'type',
        'permissions',
        'last_write_time',
    )


    def __init__(self, type=None, permissions=None, last_write_time=None,):
        self.type = type
        self.permissions = permissions
        self.last_write_time = last_write_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.permissions = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.last_write_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rpc_file_status')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.permissions is not None:
            oprot.writeFieldBegin('permissions', TType.I32, 2)
            oprot.writeI32(self.permissions)
            oprot.writeFieldEnd()
        if self.last_write_time is not None:
            oprot.writeFieldBegin('last_write_time', TType.I64, 3)
            oprot.writeI64(self.last_write_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.permissions is None:
            raise TProtocolException(message='Required field permissions is unset!')
        if self.last_write_time is None:
            raise TProtocolException(message='Required field last_write_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class rpc_data_status(object):
    """
    Attributes:
     - type
     - backing_path
     - chain_length
     - data_blocks
     - flags
     - tags

    """

    __slots__ = (
        'type',
        'backing_path',
        'chain_length',
        'data_blocks',
        'flags',
        'tags',
    )


    def __init__(self, type=None, backing_path=None, chain_length=None, data_blocks=None, flags=None, tags=None,):
        self.type = type
        self.backing_path = backing_path
        self.chain_length = chain_length
        self.data_blocks = data_blocks
        self.flags = flags
        self.tags = tags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.backing_path = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.chain_length = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.data_blocks = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = rpc_replica_chain()
                        _elem12.read(iprot)
                        self.data_blocks.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.tags = {}
                    (_ktype14, _vtype15, _size13) = iprot.readMapBegin()
                    for _i17 in range(_size13):
                        _key18 = iprot.readString()
                        _val19 = iprot.readString()
                        self.tags[_key18] = _val19
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rpc_data_status')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type)
            oprot.writeFieldEnd()
        if self.backing_path is not None:
            oprot.writeFieldBegin('backing_path', TType.STRING, 2)
            oprot.writeString(self.backing_path)
            oprot.writeFieldEnd()
        if self.chain_length is not None:
            oprot.writeFieldBegin('chain_length', TType.I32, 3)
            oprot.writeI32(self.chain_length)
            oprot.writeFieldEnd()
        if self.data_blocks is not None:
            oprot.writeFieldBegin('data_blocks', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.data_blocks))
            for iter20 in self.data_blocks:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 5)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.tags))
            for kiter21, viter22 in self.tags.items():
                oprot.writeString(kiter21)
                oprot.writeString(viter22)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.backing_path is None:
            raise TProtocolException(message='Required field backing_path is unset!')
        if self.chain_length is None:
            raise TProtocolException(message='Required field chain_length is unset!')
        if self.data_blocks is None:
            raise TProtocolException(message='Required field data_blocks is unset!')
        if self.flags is None:
            raise TProtocolException(message='Required field flags is unset!')
        if self.tags is None:
            raise TProtocolException(message='Required field tags is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class rpc_dir_entry(object):
    """
    Attributes:
     - name
     - status

    """

    __slots__ = (
        'name',
        'status',
    )


    def __init__(self, name=None, status=None,):
        self.name = name
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.status = rpc_file_status()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rpc_dir_entry')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 2)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class directory_service_exception(TException):
    """
    Attributes:
     - msg

    """

    __slots__ = (
        'msg',
    )


    def __init__(self, msg=None,):
        self.msg = msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.msg = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('directory_service_exception')
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 1)
            oprot.writeString(self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.msg is None:
            raise TProtocolException(message='Required field msg is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(rpc_replica_chain)
rpc_replica_chain.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'block_ids', (TType.STRING, None, False), None, ),  # 1
    (2, TType.STRING, 'name', None, None, ),  # 2
    (3, TType.STRING, 'metadata', None, None, ),  # 3
    (4, TType.I32, 'storage_mode', None, None, ),  # 4
)
all_structs.append(rpc_file_status)
rpc_file_status.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'permissions', None, None, ),  # 2
    (3, TType.I64, 'last_write_time', None, None, ),  # 3
)
all_structs.append(rpc_data_status)
rpc_data_status.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', None, None, ),  # 1
    (2, TType.STRING, 'backing_path', None, None, ),  # 2
    (3, TType.I32, 'chain_length', None, None, ),  # 3
    (4, TType.LIST, 'data_blocks', (TType.STRUCT, [rpc_replica_chain, None], False), None, ),  # 4
    (5, TType.I32, 'flags', None, None, ),  # 5
    (6, TType.MAP, 'tags', (TType.STRING, None, TType.STRING, None, False), None, ),  # 6
)
all_structs.append(rpc_dir_entry)
rpc_dir_entry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', None, None, ),  # 1
    (2, TType.STRUCT, 'status', [rpc_file_status, None], None, ),  # 2
)
all_structs.append(directory_service_exception)
directory_service_exception.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'msg', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs

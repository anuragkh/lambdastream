/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef block_response_service_H
#define block_response_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "block_service_types.h"

namespace jiffy { namespace storage {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class block_response_serviceIf {
 public:
  virtual ~block_response_serviceIf() {}
  virtual void response(const sequence_id& seq, const std::vector<std::string> & result) = 0;
  virtual void chain_ack(const sequence_id& seq) = 0;
  virtual void notification(const std::string& op, const std::string& data) = 0;
  virtual void control(const response_type type, const std::vector<std::string> & ops, const std::string& error) = 0;
};

class block_response_serviceIfFactory {
 public:
  typedef block_response_serviceIf Handler;

  virtual ~block_response_serviceIfFactory() {}

  virtual block_response_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(block_response_serviceIf* /* handler */) = 0;
};

class block_response_serviceIfSingletonFactory : virtual public block_response_serviceIfFactory {
 public:
  block_response_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf>& iface) : iface_(iface) {}
  virtual ~block_response_serviceIfSingletonFactory() {}

  virtual block_response_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(block_response_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface_;
};

class block_response_serviceNull : virtual public block_response_serviceIf {
 public:
  virtual ~block_response_serviceNull() {}
  void response(const sequence_id& /* seq */, const std::vector<std::string> & /* result */) {
    return;
  }
  void chain_ack(const sequence_id& /* seq */) {
    return;
  }
  void notification(const std::string& /* op */, const std::string& /* data */) {
    return;
  }
  void control(const response_type /* type */, const std::vector<std::string> & /* ops */, const std::string& /* error */) {
    return;
  }
};

typedef struct _block_response_service_response_args__isset {
  _block_response_service_response_args__isset() : seq(false), result(false) {}
  bool seq :1;
  bool result :1;
} _block_response_service_response_args__isset;

class block_response_service_response_args {
 public:

  block_response_service_response_args(const block_response_service_response_args&);
  block_response_service_response_args& operator=(const block_response_service_response_args&);
  block_response_service_response_args() {
  }

  virtual ~block_response_service_response_args() throw();
  sequence_id seq;
  std::vector<std::string>  result;

  _block_response_service_response_args__isset __isset;

  void __set_seq(const sequence_id& val);

  void __set_result(const std::vector<std::string> & val);

  bool operator == (const block_response_service_response_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const block_response_service_response_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_response_service_response_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_response_service_response_pargs {
 public:


  virtual ~block_response_service_response_pargs() throw();
  const sequence_id* seq;
  const std::vector<std::string> * result;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _block_response_service_chain_ack_args__isset {
  _block_response_service_chain_ack_args__isset() : seq(false) {}
  bool seq :1;
} _block_response_service_chain_ack_args__isset;

class block_response_service_chain_ack_args {
 public:

  block_response_service_chain_ack_args(const block_response_service_chain_ack_args&);
  block_response_service_chain_ack_args& operator=(const block_response_service_chain_ack_args&);
  block_response_service_chain_ack_args() {
  }

  virtual ~block_response_service_chain_ack_args() throw();
  sequence_id seq;

  _block_response_service_chain_ack_args__isset __isset;

  void __set_seq(const sequence_id& val);

  bool operator == (const block_response_service_chain_ack_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    return true;
  }
  bool operator != (const block_response_service_chain_ack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_response_service_chain_ack_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_response_service_chain_ack_pargs {
 public:


  virtual ~block_response_service_chain_ack_pargs() throw();
  const sequence_id* seq;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _block_response_service_notification_args__isset {
  _block_response_service_notification_args__isset() : op(false), data(false) {}
  bool op :1;
  bool data :1;
} _block_response_service_notification_args__isset;

class block_response_service_notification_args {
 public:

  block_response_service_notification_args(const block_response_service_notification_args&);
  block_response_service_notification_args& operator=(const block_response_service_notification_args&);
  block_response_service_notification_args() : op(), data() {
  }

  virtual ~block_response_service_notification_args() throw();
  std::string op;
  std::string data;

  _block_response_service_notification_args__isset __isset;

  void __set_op(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const block_response_service_notification_args & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const block_response_service_notification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_response_service_notification_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_response_service_notification_pargs {
 public:


  virtual ~block_response_service_notification_pargs() throw();
  const std::string* op;
  const std::string* data;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _block_response_service_control_args__isset {
  _block_response_service_control_args__isset() : type(false), ops(false), error(false) {}
  bool type :1;
  bool ops :1;
  bool error :1;
} _block_response_service_control_args__isset;

class block_response_service_control_args {
 public:

  block_response_service_control_args(const block_response_service_control_args&);
  block_response_service_control_args& operator=(const block_response_service_control_args&);
  block_response_service_control_args() : type((response_type)0), error() {
  }

  virtual ~block_response_service_control_args() throw();
  response_type type;
  std::vector<std::string>  ops;
  std::string error;

  _block_response_service_control_args__isset __isset;

  void __set_type(const response_type val);

  void __set_ops(const std::vector<std::string> & val);

  void __set_error(const std::string& val);

  bool operator == (const block_response_service_control_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(ops == rhs.ops))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const block_response_service_control_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_response_service_control_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_response_service_control_pargs {
 public:


  virtual ~block_response_service_control_pargs() throw();
  const response_type* type;
  const std::vector<std::string> * ops;
  const std::string* error;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

template <class Protocol_>
class block_response_serviceClientT : virtual public block_response_serviceIf {
 public:
  block_response_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  block_response_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void response(const sequence_id& seq, const std::vector<std::string> & result);
  void send_response(const sequence_id& seq, const std::vector<std::string> & result);
  void chain_ack(const sequence_id& seq);
  void send_chain_ack(const sequence_id& seq);
  void notification(const std::string& op, const std::string& data);
  void send_notification(const std::string& op, const std::string& data);
  void control(const response_type type, const std::vector<std::string> & ops, const std::string& error);
  void send_control(const response_type type, const std::vector<std::string> & ops, const std::string& error);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef block_response_serviceClientT< ::apache::thrift::protocol::TProtocol> block_response_serviceClient;

template <class Protocol_>
class block_response_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (block_response_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (block_response_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_response(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_chain_ack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_chain_ack(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_notification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notification(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_control(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_control(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  block_response_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface) :
    iface_(iface) {
    processMap_["response"] = ProcessFunctions(
      &block_response_serviceProcessorT::process_response,
      &block_response_serviceProcessorT::process_response);
    processMap_["chain_ack"] = ProcessFunctions(
      &block_response_serviceProcessorT::process_chain_ack,
      &block_response_serviceProcessorT::process_chain_ack);
    processMap_["notification"] = ProcessFunctions(
      &block_response_serviceProcessorT::process_notification,
      &block_response_serviceProcessorT::process_notification);
    processMap_["control"] = ProcessFunctions(
      &block_response_serviceProcessorT::process_control,
      &block_response_serviceProcessorT::process_control);
  }

  virtual ~block_response_serviceProcessorT() {}
};

typedef block_response_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > block_response_serviceProcessor;

template <class Protocol_>
class block_response_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  block_response_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< block_response_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< block_response_serviceIfFactory > handlerFactory_;
};

typedef block_response_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > block_response_serviceProcessorFactory;

class block_response_serviceMultiface : virtual public block_response_serviceIf {
 public:
  block_response_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~block_response_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> > ifaces_;
  block_response_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<block_response_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void response(const sequence_id& seq, const std::vector<std::string> & result) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->response(seq, result);
    }
    ifaces_[i]->response(seq, result);
  }

  void chain_ack(const sequence_id& seq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->chain_ack(seq);
    }
    ifaces_[i]->chain_ack(seq);
  }

  void notification(const std::string& op, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notification(op, data);
    }
    ifaces_[i]->notification(op, data);
  }

  void control(const response_type type, const std::vector<std::string> & ops, const std::string& error) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->control(type, ops, error);
    }
    ifaces_[i]->control(type, ops, error);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class block_response_serviceConcurrentClientT : virtual public block_response_serviceIf {
 public:
  block_response_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  block_response_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void response(const sequence_id& seq, const std::vector<std::string> & result);
  void send_response(const sequence_id& seq, const std::vector<std::string> & result);
  void chain_ack(const sequence_id& seq);
  void send_chain_ack(const sequence_id& seq);
  void notification(const std::string& op, const std::string& data);
  void send_notification(const std::string& op, const std::string& data);
  void control(const response_type type, const std::vector<std::string> & ops, const std::string& error);
  void send_control(const response_type type, const std::vector<std::string> & ops, const std::string& error);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef block_response_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> block_response_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "block_response_service.tcc"
#include "block_service_types.tcc"

#endif
